Here is a **complete backend-focused AI prompt** to build a powerful, AI-integrated, real-time collaborative code editor like VS Code, Replit, Cursor, and BOLT‚Äîpurely focused on **backend functionalities**, with advanced features and multi-language, plugin, orchestration, and AI integration support.

---

### ‚úÖ **Prompt for Backend Development (Advanced Full Backend AI Prompt)**

> **Prompt:**
> Build the full **backend architecture** of a real-time, collaborative AI-powered code editor platform (like VS Code + Replit + Cursor + BOLT) with the following advanced features:

---

#### üîß **Core Functionalities**

* Authentication & Authorization (OAuth, JWT, Social Login)
* Real-time multi-user collaboration (WebSocket + CRDT)
* Multi-language runtime support (500+ languages: Python, Node.js, C++, Java, etc.)
* Project & file structure management (create, rename, delete, move files/folders)
* Terminal and Shell emulation (PTY support for Bash, PowerShell, zsh)
* Auto-save, version control, and GitHub/GitLab sync (Git integration)
* AI-powered code completion and chat using:

  * OpenAI GPT-4
  * Claude AI
  * Gemini
  * Flash AI
* Built-in package & dependency manager (npm, pip, Maven, etc.)
* Secure containerized execution using Docker or Firecracker
* Project scaffolding and generation based on user-selected tech stack
* Plugin system for backend plugins/extensions
* REST + GraphQL API for all backend services
* Backend orchestration using microservices architecture or event-driven serverless logic

---

#### üß† **AI-Powered Backend Functionalities**

* Real-time AI debugging assistance via prompt injection
* AI-based project codebase generation (based on prompts, user tech stack)
* Language translation (e.g., convert Node.js ‚Üî Python ‚Üî Java)
* AI-based function documentation generator
* Smart API generator with Swagger/OpenAPI export
* AI-generated test case generation with Mocha, Jest, PyTest, etc.

---

#### üîÑ **Multi-Language Execution Engine**

* Use Dockerized sandboxes or serverless Firecracker VMs to execute:

  * Python (via Flask/ FastAPI runtime)
  * Node.js (Express/NestJS)
  * C++, Java, PHP, Ruby, Rust, Go, Kotlin, Swift, etc.
* Dynamically spawn and clean up isolated containers for each execution
* Support for stdin/stdout handling and memory/CPU limits
* Persistent volume management for user files per session

---

#### üì° **Advanced Features**

* Live collaboration using Socket.IO + CRDT algorithm
* Database integration support:

  * MongoDB, PostgreSQL, MySQL, SQLite (based on user selection)
  * Auto DB schema generator using AI prompt
* Realtime log and analytics service
* Built-in CDN for assets
* Rate limiting, CORS, input sanitization
* Auto-scaling with Kubernetes, or AWS ECS/Fargate
* Hosting for backend APIs and code in user-selected region

---

#### ‚öôÔ∏è **DevOps/Backend Ops**

* API Gateway setup (Kong/NGINX/Express Gateway)
* Continuous Integration and Deployment (GitHub Actions, Docker, Jenkins)
* Database schema migrations (Flyway, Prisma, Alembic)
* Monitoring & Logging (Prometheus, Grafana, Loki, Sentry)
* Custom AI plugin execution APIs
* Multi-tenant backend design for SaaS use

---

#### üîê **Security**

* File-level encryption, data isolation per user
* OWASP compliant backend APIs
* Secret management (Hashicorp Vault / AWS Secrets Manager)
* Rate limiting, brute-force prevention

---

#### üß± **Orchestrator Layer (Main Controller Backend Layer)**

* Central brain coordinating code execution, file access, AI plugins, chat agents
* Message broker for services: RabbitMQ / NATS / Kafka
* AI Task Dispatcher (routes requests to OpenAI, Claude, Gemini, Flash AI)
* Session management and TTL-based resource cleanup

---

#### üì¶ **Pre-Built Starter Generator**

* Prompt-based auto project initializer with:

  * Framework selection (MERN, Django, Flask, Spring Boot, etc.)
  * Pre-installed packages and templates
  * AI-generated boilerplate and folder structure

---

#### üîå **AI Plugin Integration**

* Build & expose plugin API for custom AI tools
* AI tools like ChatGPT, Claude, Gemini, and Flash can:

  * Modify files
  * Generate files/tests
  * Debug existing code
  * Interact with DB
* All interactions logged and traceable for audit

---

### üß™ Example Use Cases (Backend Level)

* `POST /execute`: Run Python or JS code and return output
* `POST /generate`: Accept tech stack prompt and scaffold backend project
* `POST /ai-debug`: Analyze code errors and suggest fixes
* `POST /translate`: Convert code from Python ‚Üí Node.js
* `GET /collaborate`: Join real-time session with CRDT sync

---

### üîô Tech Stack Suggestion

* **Node.js (Express/NestJS)** for orchestration and APIs
* **Python (FastAPI/Flask)** for AI logic and plugin engine
* **MongoDB/PostgreSQL** for user/project/data persistence
* **Redis** for session and socket data
* **Docker + Kubernetes** for container orchestration
* **OpenAI, Claude, Gemini APIs** for AI functionality
* **WebSockets/Socket.IO** for real-time updates

---

Let me know if you want this converted into **code implementation**, **project directory structure**, **API documentation**, or **deployment instructions** as next steps.
